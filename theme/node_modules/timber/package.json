{
  "_args": [
    [
      {
        "raw": "timber",
        "scope": null,
        "escapedName": "timber",
        "name": "timber",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/tomsvecak/Documents/Projects/TomSvecak/Apastron/theme"
    ]
  ],
  "_from": "timber@latest",
  "_id": "timber@0.0.1",
  "_inCache": true,
  "_location": "/timber",
  "_phantomChildren": {},
  "_requested": {
    "raw": "timber",
    "scope": null,
    "escapedName": "timber",
    "name": "timber",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/timber/-/timber-0.0.1.tgz",
  "_shasum": "b27fa0fde948c366bd791b9151a875c942348f38",
  "_shrinkwrap": null,
  "_spec": "timber",
  "_where": "/Users/tomsvecak/Documents/Projects/TomSvecak/Apastron/theme",
  "author": {
    "name": "Hugh Kennedy",
    "email": "hughskennedy@gmail.com",
    "url": "http://hughskennedy.com"
  },
  "bugs": {
    "url": "https://github.com/hughsk/timber/issues"
  },
  "dependencies": {
    "funstance": "~0.0.2",
    "inherits": "~1.0.0"
  },
  "description": "A lean logging module, in the form of an `EventEmitter` with an identical API to `console`.",
  "devDependencies": {
    "tape": "~0.2.2"
  },
  "directories": {},
  "dist": {
    "shasum": "b27fa0fde948c366bd791b9151a875c942348f38",
    "tarball": "https://registry.npmjs.org/timber/-/timber-0.0.1.tgz"
  },
  "homepage": "https://github.com/hughsk/timber#readme",
  "keywords": [
    "logging",
    "events",
    "emitter",
    "debug",
    "modular",
    "lightweight"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "hughsk",
      "email": "hughskennedy@gmail.com"
    }
  ],
  "name": "timber",
  "optionalDependencies": {},
  "readme": "# timber\n\nA lean logging module, in the form of an `EventEmitter` with an identical API to `console`.\n\nFor those times when you need a little more than\n[debug](https://npmjs.org/package/debug) but a little less than\n[winston](https://npmjs.org/package/winston). Or you're just not ready to\ncommit.\n\nWorks in Node, or in the browser using [browserify](http://browserify.org).\n\n## Installation\n\n``` javascript\nnpm install timber\n```\n\n## Usage\n\nCan be used entirely in place of console - instead of logging, however, the\ninstance will emit events based on the name of the method.\n\nSo `timber.log('hello', 'world')` will call the `log` event with\n`('hello', 'world')` as the arguments.\n\n**logger = require('timber')**\n\nReturns a shared log instance.\n\n**logger()**\n\nReturns a clean log instance, without any listeners.\n\n**logger('namespace')**\n\nReturns a namespaced logger - creates a new one the first time, but will return\nthe same log instance with future uses.\n\n**logger.on('method', callback)**\n\nListen to log calls on this instance. The event callback returns all of the\narguments used with the method - handle them however you like.\n\n**logger.EVENTS**\n\nA list of the supported events/methods, so you can do things like this:\n\n``` javascript\nvar timber = require('timber')\n\n// Makes timber act exactly like console\ntimber.EVENTS.forEach(function(name) {\n  timber.on(name, console[name].bind(console))\n})\n```\n\n## Example\n\n``` javascript\nvar timber = require('timber')\n\ntimber.log('does nothing')\n\ntimber.on('log', console.log.bind(console))\n\ntimber.log('first log')\nconsole.log('also log')\n\ntimber.on('warn', function(arg1, arg2) {\n  console.warn(['warn:', arg2, arg1].join(' '))\n})\n\ntimber.warn(404, 'warning!') // warn: warning! 404\n```\n\n",
  "repository": {
    "type": "git",
    "url": "git://github.com/hughsk/timber.git"
  },
  "scripts": {
    "test": "node test.js"
  },
  "version": "0.0.1"
}
